// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  goals      Goal[]
  yearPlans  YearPlan[]
  categories Category[]
}

model Goal {
  id        String     @id @default(uuid()) @db.Uuid
  userId    String     @db.Uuid
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  status    GoalStatus @default(TODO)
  createdAt DateTime   @default(now())
}

enum GoalStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

model YearPlan {
  id     String      @id @default(uuid()) @db.Uuid
  userId String      @db.Uuid
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  year   Int
  months MonthPlan[]
}

model MonthPlan {
  id         String     @id @default(uuid()) @db.Uuid
  yearPlanId String     @db.Uuid
  yearPlan   YearPlan   @relation(fields: [yearPlanId], references: [id], onDelete: Cascade)
  month      Int
  weekPlans  WeekPlan[]
}

model WeekPlan {
  id          String    @id @default(uuid()) @db.Uuid
  monthPlanId String    @db.Uuid
  monthPlan   MonthPlan @relation(fields: [monthPlanId], references: [id], onDelete: Cascade)
  startDate   DateTime
  endDate     DateTime
  tasks       Task[]
  focus       Focus[]

  archive TaskArchive[]
}

model Focus {
  id          String   @id @default(uuid()) @db.Uuid
  weekPlanId  String   @db.Uuid
  weekPlan    WeekPlan @relation(fields: [weekPlanId], references: [id], onDelete: Cascade)
  title       String
  description String
}

model Category {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String   @unique
  tasks     Task[]
  createdAt DateTime @default(now())

  @@unique([userId, name])
}

model Task {
  id          String     @id @default(uuid()) @db.Uuid
  weekPlanId  String     @db.Uuid
  weekPlan    WeekPlan   @relation(fields: [weekPlanId], references: [id], onDelete: Cascade)
  title       String
  description String
  priority    Priority
  duration    Int
  day         Int
  date        DateTime
  categoryId  String     @db.Uuid
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  status      TaskStatus @default(TODO)
  createdAt   DateTime   @default(now())

  archive TaskArchive[]
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

model TaskArchive {
  id         String   @id @default(uuid()) @db.Uuid
  taskId     String   @db.Uuid
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  weekPlanId String   @db.Uuid
  weekPlan   WeekPlan @relation(fields: [weekPlanId], references: [id], onDelete: Cascade)
  reason     String
  createdAt  DateTime @default(now())
}
